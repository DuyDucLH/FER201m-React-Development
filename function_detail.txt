 Array:
	Mutator methods: change the original array

		array.fill(value, start, end)
	 	 	return value: the modified array

		push() - Adds one or more elements to the end of an array
		pop() - Removes the last element from an array
		shift() - Removes the first element from an array
		unshift() - Adds one or more elements to the beginning of an array
		splice() - Changes the contents of an array by removing or replacing existing elements and/or adding new elements
		array.splice(index, howmany, item1, ....., itemX)
		index	Required.
		The position to add/remove items.
		Negative value defines the position from the end of the array.
		howmany	Optional.
		Number of items to be removed.
		item1, ..., itemX	Optional.
		New elements(s) to be added.

		sort() - Sorts the elements of an array in place
		reverse() - Reverses the order of the elements of an array in place

	Non-mutator methods: NOT change the original array

		array1.concat(array2, array3, ..., arrayX)
			return value: new array of array1 + array2 + array3 + ... + arrayX

		array.slice(start, end)
			The first parameter is the index to start extraction from
			The second parameter is the index to stop extraction at (non-inclusive)
			If the second parameter is omitted, it extracts up to the end of the array
			Return: a new, 'shallow' copy array containing the extracted elements

		array.flat(depth): depth is optional, default is 1
			return value: dàn phẳng array theo độ sâu nếu có phần tử là 1 mảng.

		array.map( function(currentValue, index, arr), thisValue )
			return value: The results of a function for each array element. 
							An empty array if the function does not return anything.
			NOT execute the function for empty elements

		array.filter( function(currentValue, index, arr), thisValue )
			return value: new array of elements that return true. 
							empty array if all elements return false.
			NOT execute the function for empty elements
			
		array.every( function(currentValue, index, arr), thisValue )
			return value: true/false
	 	 	NOT execute the function for empty elements

		array.find( function(currentValue, index, arr), thisValue )
			return value: the VALUE of the first element in the array that return true.
					  	  undefined if all elements return false.

		array.findIndex( function(currentValue, index, arr), thisValue )
			return value: the index of the first element in the array that pass the test.
					  	  -1 if no elements pass the test.
	
		reduce() - Applies a function against an accumulator and each value of the array to reduce it to a single value
		some() - Returns true if at least one element in the array satisfies the testing function
		keys() - Returns a new Array Iterator object that contains the keys for each index in the array
		values() - Returns a new Array Iterator object that contains the values for each index in the array
		entries() - Returns a new Array Iterator object that contains the key/value pairs for each index in the array


		array.forEach( function(currentValue, index, arr), thisValue )
				return value: undefined
				- thisValue: optional. A value to be passed to the function to be used as its "this" value.

		array.sort(compareFunction)
				return value: sorted array. Overwrite the original array.
				- compareFunction: optional. Default: compare as string and ascending order.
					+ function(a, b){return a - b}: sort by return value negative, 0, positive

 String:
	localeCompare(string2, locales, options)
